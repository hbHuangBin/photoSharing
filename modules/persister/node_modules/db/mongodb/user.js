var util = require('util'),
	Document = require('./document.js'),
	Collection = require('./collection.js'),
	CONST = require('./const.js'),
	VERSION = CONST.VERSION;

module.exports = User;

/* public apis */
function User (uuid, loginName, displayName, isAdmin, passwordHash,
			   followingGroups, followingUsers, followers) {
	this.uuid = uuid;
	this.loginName = loginName;
	this.displayName = displayName;
	this.isAdmin = isAdmin;
	this.passwordHash = passwordHash;			/* {hash, salt}, could be undefined when no using combined db authenticator */
	this.followingGroups = followingGroups;		/* group ids that currently following */
	this.followingUsers = followingUsers;		/* user ids that currently following */
	this.followers = followers;					/* user ids that currenlty follow this user */
	this.version = VERSION;

	Document.call(this, User._collectionName, User._transformDBResult);
	return this;
}
util.inherits(User, Document);

/* static properties */
User._collectionName = 'users';
User._transformDBResult = function (result) {
	var ret;

	ret = new User(result.uuid, result.loginName, result.displayName, result.isAdmin, result.passwordHash,
				   result.followingGroups, result.followingUsers, result.followers);
	ret._copyDBResult(result);

	return ret;
};
User.getCollection = Collection.getCollection.bind(null, User._collectionName);
User.findForEach = Collection.findForEach.bind(null, User._collectionName, User._transformDBResult);
User.findOne = Collection.findOne.bind(null, User._collectionName, User._transformDBResult);

/* overwrite the _validate function */
User.prototype._validate = function () {
	if (typeof(this.uuid) === 'string' &&
		typeof(this.loginName) === 'string' &&
		(!this.displayName || typeof(this.displayName) === 'string') &&
		typeof(this.isAdmin) === 'boolean' &&
		(!this.passwordHash || typeof(this.passwordHash) === 'object') &&
		Array.isArray(this.followingGroups) &&
		Array.isArray(this.followingUsers) &&
		Array.isArray(this.followers)) {
		return true;
	} else {
		return false;
	}
};
