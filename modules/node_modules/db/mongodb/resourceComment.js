var util = require('util'),
	Document = require('./document.js'),
	Collection = require('./collection.js'),
	CONST = require('./const.js'),
	Resource = require('./Resource.js'),
	VERSION = CONST.VERSION,
	RESOURCE = Resource._collectionName,
	COMMENT = 'comment';

module.exports = ResourceComment;

/* public apis */
function ResourceComment (resource_id, user_id, comment, timestamp) {
	this.user_id = user_id;
	this.comment = comment;
	this.timestamp = timestamp;
	this.version = VERSION;

	Document.call(this, Collection.makeJoinName(RESOURCE, resource_id, RESOURCE), 
				  ResourceComment._transformDBResult, resource_id);

	return this;
}
util.inherits(ResourceComment, Document);

/* static function */
ResourceComment._transformDBResult = function (result, primary_id) {
	var ret;

	ret = new ResourceComment(primary_id, result.user_id, result.comment, result.timestamp);
	ret._copyDBResult(result);

	return ret;
};
ResourceComment.getCollection = function(resource_id) {
	var colName = Collection.makeJoinName(RESOURCE, resource_id, RESOURCE);
	var args = Array.from(arguments);
	args.shift();args.unshift(colName);
	return Collection.getCollection.apply(null, args);
};
ResourceComment.findForEach = function(resource_id) {
	var colName = Collection.makeJoinName(RESOURCE, resource_id, RESOURCE);
	var args = Array.from(arguments);
	args.shift();args.unshift(ResourceComment._transformDBResult);args.unshift(colName);
	return Collection.findForEach.apply(null, args);
};
ResourceComment.findOne = Collection.joinFindOne.bind(null, RESOURCE, COMMENT,
													  ResourceComment._transformDBResult);

/* overwrite the _validate function */
ResourceComment.prototype._validate = function () {
	if (typeof this.user_id === 'string' &&
		typeof this.comment === 'string' &&
		typeof this.timestamp === 'number') {
		return true;
	} else {
		return false;
	}
};

