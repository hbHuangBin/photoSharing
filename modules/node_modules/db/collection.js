/**
 * Wrap collection utility functions for classes to bind as their methods
 */
module.exports = {
	findOne: findOne,
	joinFindOne: joinFindOne,
	findForEach: findForEach,

	getCollection: getCollection,
	makeJoinName: makeJoinName
};

function findOne (collection, transform,
				  db, selector, options, callback) {
  var c = db.collection(collection);

  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  c.findOne(selector, options, function (error, dbResult) {
    callback(error, (error || !dbResult) ? null : transform(dbResult));
  });
}

function joinFindOne (collectionA, collectionB, transform,
					  db, selector, options, callback) {
  var tmpSelector,
      connectionName,
      c;

  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  if (typeof selector !== 'object' ||
      typeof selector[collectionA] !== 'string') {
    callback(new TypeError('the selector is expected to be an object with property: ' +
                       collectionA));
    return;
  }
  
  tmpSelector = (JSON.parse(JSON.stringify(selector)));
  delete tmpSelector[collectionA];

  connectionName = makeJoinName(collectionA, selector[collectionA], collectionB);
  c = db.colleciton(connectionName);
  
  c.findOne(tmpSelector, options, function (error, dbResult) {
    callback(error, (error || !dbResult) ? null : transform(dbResult, selector[collectionA]));
  });
};

function findForEach(collectionName, transform,
					 db, selector, eachCb, cursorOpt) {
	var c = db.collection(collectionName);

	var cursor = c.find();

	if (cursorOpt) {
		if (cursorOpt.skip) {cursor.skip(cursorOpt.skip);}
		if (cursorOpt.limit) {cursor.limit(cursorOpt.limit);}
		if (cursorOpt.project) {cursor.project(cursorOpt.project);}
	}

	cursor.forEach(function(doc) {
		eachCb(null, doc);
	}, function(err) {
		if (err) {
			eachCb(err);
		}
	});
}

function getCollection(collectionName, db) {
	return db.collection(collectionName);
}

function makeJoinName (collectionA, id, collectionB) {
  return collectionA + '_' + id + '_' + collectionB;
}
