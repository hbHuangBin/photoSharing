var util = require('util'),
	Document = require('./document.js'),
	Collection = require('./collection.js'),
	CONST = require('./const.js'),
	VERSION = CONST.VERSION;

module.exports = Resource;

/* public apis */
function Resource (uuid, fileName, meta, data, overallRate,
				   user_id, album_id, group_ids) {

	this.uuid = uuid;
	this.fileName = fileName;

	/* meta = {
	 *		width, height,
	 *		author, dateTaken, program, copyright,
	 *		xResolution, yResolution, bitDepth,
	 *		maker, model,
	 *		fStop, exposureTime, iso, exposureBias, focalLength, flash, whiteBalance,
	 *		lensModel, exifVersion
	 * }
	 */
	this.meta = meta;

	/* data = {
	 *		original, small, medium, large
	 * }
	 */
	this.data = data;
	this.overallRate = overallRate;
	this.user_id = user_id;
	this.album_id = album_id;
	this.group_ids = group_ids;
	this.version = VERSION;

	Document.call(this, Resource._collectionName, Resource._transformDBResult);
	return this;
}
util.inherits(Resource, Document);

/* static properties */
Resource._collectionName = 'resources';
Resource._transformDBResult = function (result) {
	var ret;

	ret = new Resource(result.uuid, result.fileName, result.meta, result.data,
					   result.overallRate, result.user_id, result.album_id, result.group_ids);
	ret._copyDBResult(result);

	return ret;
};
Resource.getCollection = Collection.getCollection.bind(null, Resource._collectionName);
Resource.findForEach = Collection.findForEach.bind(null, Resource._collectionName, Resource._transformDBResult);
Resource.findOne = Collection.findOne.bind(null, Resource._collectionName, Resource._transformDBResult);

/* overwrite the _validate function */
Resource.prototype._validate = function () {
	if (typeof this.uuid === 'string' &&
		typeof this.fileName === 'string' &&
		typeof this.meta === 'object' &&
		typeof this.data === 'object' &&
		typeof this.user_id === 'string' &&
		typeof this.album_id === 'string' &&
		Array.isArray(this.group_ids)) {
		return true;
	} else {
		return false;
	}
};
